# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...
        env:
          FINNHUB: ${{ secrets.FINNHUB }}

  binaries:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Linux
        run: go build -v -o bin/tulip
        env:
          GOOS: linux
          GOARCH: amd64

      - name: Windows
        run: go build -v -o bin/tulip.exe
        env:
          GOOS: windows
          GOARCH: amd64

  versioning:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    outputs:
      version: ${{ steps.latest_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Git identity
        run: | 
          git config --global user.email "tulip@tulip.fake.domain"
          git config --global user.name "GitHub Actions"

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Changelog
        run: npx standard-version

      - name: Push changes
        run: | 
          git commit -am "docs: changelod and versioning"
          git push

      - id: latest_version
        name: Latest version
        run: node version.js >> $GITHUB_OUTPUT

  release:
    needs:
      - binaries
      - versioning
    runs-on: ubuntu-latest
    steps:
      - name: GitHub release
        run: echo "v${{needs.versioning.outputs.version}}"

      - name: Docker image
        run: echo "v${{needs.versioning.outputs.version}}"
